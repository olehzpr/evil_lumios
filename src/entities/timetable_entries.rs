//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "timetable_entries")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub week: i32,
    pub day: i32,
    pub timetable_id: i32,
    pub class_name: String,
    pub class_type: String,
    pub class_time: Time,
    #[sea_orm(column_type = "Text", nullable)]
    pub link: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::timetables::Entity",
        from = "Column::TimetableId",
        to = "super::timetables::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Timetables,
}

impl Related<super::timetables::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Timetables.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

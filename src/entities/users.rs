//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub username: String,
    pub account_id: String,
    pub chat_id: String,
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::chats::Entity",
        from = "Column::ChatId",
        to = "super::chats::Column::ChatId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chats,
    #[sea_orm(has_many = "super::gambles::Entity")]
    Gambles,
    #[sea_orm(has_many = "super::queue_users::Entity")]
    QueueUsers,
    #[sea_orm(has_one = "super::user_stats::Entity")]
    UserStats,
}

impl Related<super::chats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chats.def()
    }
}

impl Related<super::gambles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Gambles.def()
    }
}

impl Related<super::queue_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QueueUsers.def()
    }
}

impl Related<super::user_stats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStats.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

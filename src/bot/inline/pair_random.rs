use serde::Deserialize;
use teloxide::types::{InlineQueryResultArticle, InputMessageContent, InputMessageContentText};

use super::utils::hashed_rand;

#[derive(Deserialize)]
pub struct PairConfig {
    id: String,
    emoji: Vec<String>,
    title: String,
    title_with_name: String,
    response: String,
    username_response: String,
    description: String,
    img_url: String,
}

pub fn get_pair_random(
    q: &teloxide::types::InlineQuery,
    config: &PairConfig,
) -> teloxide::types::InlineQueryResultArticle {
    let username = q.from.username.as_ref().unwrap().as_str();

    let message = match q.query.trim() {
        "" => config.title.clone(),
        query if query.starts_with("@") => config.title_with_name.replace("{name}", &q.query[1..]),
        _ => config.title_with_name.replace("{name}", &q.query),
    };

    for pair in CUSTOM {
        let full_username = format!("@{}", username);
        let pair = get_pair(*pair, &full_username, q.query.trim());
        if let Some(answer) = pair {
            let emoji =
                &config.emoji[hashed_rand(&[username, &q.query]) as usize % config.emoji.len()];
            let percent = hashed_rand(&[username, &q.query]) % 101;
            let answer = answer
                .to_string()
                .replace("{emoji}", emoji)
                .replace("{name}", &q.query)
                .replace("{percent}", &percent.to_string());

            return InlineQueryResultArticle::new(
                config.id.clone(),
                message,
                InputMessageContent::Text(InputMessageContentText::new(answer)),
            )
            .description(config.description.clone())
            .thumbnail_url(config.img_url.parse().unwrap());
        }
    }

    let answer = match q.query.trim() {
        "" => InputMessageContent::Text(InputMessageContentText::new("* –∑–≤—É–∫–∏ –º–æ–≤—á–∞–Ω–Ω—è *")),
        query if query.starts_with("@") => {
            let emoji =
                &config.emoji[hashed_rand(&[username, &query[1..]]) as usize % config.emoji.len()];
            let percent = hashed_rand(&[username, &query[1..]]) % 101;

            InputMessageContent::Text(InputMessageContentText::new(
                config
                    .username_response
                    .replace("{emoji}", emoji)
                    .replace("{name}", &q.query[1..])
                    .replace("{percent}", &percent.to_string()),
            ))
        }
        _ => {
            let emoji =
                &config.emoji[hashed_rand(&[username, &q.query]) as usize % config.emoji.len()];
            let percent = hashed_rand(&[username, &q.query]) % 101;

            InputMessageContent::Text(InputMessageContentText::new(
                config
                    .response
                    .replace("{emoji}", emoji)
                    .replace("{name}", &q.query)
                    .replace("{percent}", &percent.to_string()),
            ))
        }
    };

    InlineQueryResultArticle::new(config.id.clone(), message, answer)
        .description(config.description.clone())
        .thumbnail_url(config.img_url.parse().unwrap())
}

#[rustfmt::skip]
const CUSTOM: &[ [&str; 3] ] = &[
    // 1	–ë–∞–Ω–¥—É—Ä–∞ –ê—Ä—Ç–µ–º –Ü–±—Ä–∞–≥—ñ–º–æ–≤–∏—á @CabianoFaruana
    ["@CabianoFaruana", "@olehzpr", "–í–∏ –∑ –û–ª–µ–≥–æ–º –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –Ω–∞ 69% üòèüòèüòè. –¢—ñ–ª—å–∫–∏ –º—ñ—Ü–Ω–∞ —á–æ–ª–æ–≤—ñ—á–∞ –¥—Ä—É–∂–±–∞, –Ω—ñ—á–æ–≥–æ –±—ñ–ª—å—à–µ"],
    ["@CabianoFaruana", "–ø—Å–∂", "–ü–°–ñ ‚Äî –Ω–∞–π–∫—Ä–∞—â–∏–π –∫–ª—É–±! üî•‚öΩ"],
    ["@CabianoFaruana", "–∫–æ—Ä–Ω–∞–≥–∞", "–í–∏ –∑ –ö–æ—Ä–Ω–∞–≥–æ—é –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –Ω–∞ üî• 101% üî•"],
    // 2	–í–æ–π—Ç—é–∫ –ê–Ω–∞—Å—Ç–∞—Å—ñ—è –°–µ—Ä–≥—ñ—ó–≤–Ω–∞ @wiastia
    ["@wiastia", "—á–∞–π", "–í–∏ –∑ —á–∞—î–º –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –Ω–∞ 100% üçµ. –¢–æ–±—ñ –± –¥—ñ–π—Å–Ω–æ –Ω–µ –∑–∞–≤–∞–¥–∏–ª–æ –ø–æ–ø–∏—Ç–∏ —Ç—Ä–æ—Ö–∏ —á–∞—é"],
    // 3	–ì–∞–≤—Ä–∏—à –û–ª–µ–∫—Å–∞–Ω–¥—Ä –î–º–∏—Ç—Ä–æ–≤–∏—á @ParisHavrysh
    // 4	–õ—ñ—Å–æ–≤–∏—á–µ–Ω–∫–æ –ö–∏—Ä–∏–ª–æ –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á @kyryloloshka
    ["@kyryloloshka", "—Ç–∞—Ä–∞–∫–∞–Ω–∏", "ü™≥ –í–∏ –∑ —Ç–∞—Ä–∞–∫–∞–Ω–∞–º–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É –Ω–∞ 100% ü™≥. –ì–∞—Ä—è—á–∞ —Ç–∞—Ä–∞–∫–∞–Ω–µ—Å—Å–∞ –∑ 8-–≥–æ –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É –ø–µ—Ä–µ–¥–∞—î —Ç–æ–±—ñ –ø—Ä–∏–≤—ñ—Ç üòòüòòüòò"],
    ["@kyryloloshka", "—Ä–µ—Ñ—ñ–ª –ø–µ–ø—Å—ñ", "–í–∏ –∑ —Ä–µ—Ñ—ñ–ª–æ–º –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É. –ö—Ä–∞—â–µ –π–¥–∏ –≤ –º–∞–∫–¥–æ–Ω–∞–ª—å–¥—Å üçî"],
    // 5	–ì–∞—Ä–∞—â—É–∫ –ù–∞—Ç–∞ –Æ—Ä—ñ—ó–≤–Ω–∞ @o_o_n_n_0_0
    // 6	–ì–µ—Ä–∞—Å–∏–º—á—É–∫ –î–µ–Ω–∏—Å –ú–∏–∫–æ–ª–∞–π–æ–≤–∏—á -
    // 7	–ì–ª–∏–Ω–∫–∞ –ú–∞—Ä—ñ—è –Ü–≥–æ—Ä—ñ–≤–Ω–∞ @deffkaaaa
    // 8	–ì–æ—Ä–æ—Ö –ë–æ–≥–¥–∞–Ω –î–º–∏—Ç—Ä–æ–≤–∏—á @ikeepcalm
    ["@ikeepcalm", "java", "–í–∏ –∑ java –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ, –∫—Ä–∞—â–µ –≤—á–∏ rust"],
    ["@ikeepcalm", "lumios", "–ú–æ–∂–ª–∏–≤–æ —Ç–∏ —Ö–æ—Ç—ñ–≤ —Å–∫–∞–∑–∞—Ç–∏ evil lumios üòàüòàüòà"],
    ["@ikeepcalm", "evil lumios", "–í–∏ –∑ Evil Lumios –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –Ω–∞ ü•∞ 100% ü•∞"],
    ["@ikeepcalm", "evil_lumios", "–í–∏ –∑ Evil Lumios –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –Ω–∞ ü•∞ 100% ü•∞"],
    // 9	–î—Ä–æ–∑–¥ –ù–∞–∑–∞—Ä—ñ–π –°–∫—ñ–±—ñ–¥–µ–Ω–∫–æ–≤–∏—á @DrozdyW
    // 10	–ó–∞–ø–∞—Ä–∞ –û–ª–µ–≥ –°–µ—Ä–≥—ñ–π–æ–≤–∏—á @olehzpr
    ["@olehzpr", "test", "test"],
    ["@olehzpr", "@CabianoFaruana", "–í–∏ –∑ –ê—Ä—Ç–µ–º—á–∏–∫–æ–º –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –Ω–∞ 69% üòèüòèüòè. –¢—ñ–ª—å–∫–∏ –º—ñ—Ü–Ω–∞ —á–æ–ª–æ–≤—ñ—á–∞ –¥—Ä—É–∂–±–∞, –Ω—ñ—á–æ–≥–æ –±—ñ–ª—å—à–µ"],
    // 11	–ó–µ–ª—é–∫ –Æ–ª—ñ—è –ú–∞–∫—Å–∏–º—ñ–≤–Ω–∞ @darpfnis
    // 12	–ö–∞—Ä–ø–µ–Ω–∫–æ –ö–∏—Ä–∏–ª–æ –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á @cyrylocar
    // 13	–ö–∞—Ä–ø–µ—Ü—å –î–∞–Ω—ñ—ó–ª –°–µ—Ä–≥—ñ–π–æ–≤–∏—á @dskarpets
    // 14	–ö—ñ—Ç–∞—î–≤–∞ –ö–∞—Ç–µ—Ä–∏–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞ -
    // 15	–ö–ª–æ–±—É–∫–æ–≤ –Ø—Ä–æ—Å–ª–∞–≤ –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á @yarosirgend
    // 16	–õ–∏—á–∫–æ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–∞–≤–ª–æ–≤–∏—á @lychkoalexander
    ["@lychkoalexander", "@pupkakub", "‚ù§Ô∏è‚Äçüî• –í–∏ –∑ –õ–µ—Ä–æ—é –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É –Ω–∞ 10000% ‚ù§Ô∏è‚Äçüî•"],
    ["@lychkoalexander", "—ñ–¥—ñ –Ω–∞—Ö—É–π", "—Å–∞–º —ñ–¥—ñ –Ω–∞—Ö—É–π"],
    // 17	–ú–∞–∑—É—Ä–∏–∫ –ú–∞—Ä—ñ—è –Ü–≥–æ—Ä—ñ–≤–Ω–∞ @frogpaket
    ["@frogpaket", "—Å—É—à—ñ", "–í–∏ –∑ —Å—É—à—ñ –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –Ω–∞ 100% üç£, –∞–ª–µ –∑–Ω–∞–π –º—ñ—Ä—É, –Ω–µ –º–æ–∂–Ω–∞ —Å—Ç—ñ–ª—å–∫–∏ —ó—Å—Ç–∏"],
    // 18	–ú–∞–∑—á–µ–Ω–∫–æ –í–∞–ª–µ—Ä—ñ—è –í—ñ—Ç–∞–ª—ñ—ó–≤–Ω–∞ @pupkakub
    ["@pupkakub", "@lychkoalexander", "‚ù§Ô∏è‚Äçüî• –í–∏ –∑ –°–∞–Ω—å–æ—é –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É –Ω–∞ 10000% ‚ù§Ô∏è‚Äçüî•"],
    // 19	–ú–∞–ª—ñ–π –ê–Ω–¥—Ä—ñ–π –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á @andremalille
    // 20	–ú–µ–ª—å–Ω–∏–∫ –ú–∞–∫—Å–∏–º –Ü–≥–æ—Ä–æ–≤–∏—á @DDDUUUCCK
    // 21	–ú—ñ—Ö—î—î–≤ –ë–æ–≥–¥–∞–Ω –í–∞–¥–∏–º–æ–≤–∏—á @Bohdan_MI
    // 22	–û—Å—Ç—Ä–æ–≤–∏—Ü—å–∫–∞ –Æ–ª—ñ—è –û–ª–µ–≥—ñ–≤–Ω–∞ @ostrjul
    // 23	–ü–∞—Å—é—Ä–∞ –ê–Ω–¥—Ä—ñ–π –Æ—Ä—ñ–π–æ–≤–∏—á @Pasiura_Andrii
    // 24	–ü–æ–ª—é—Ö–æ–≤–∏—á –ú–∞–∫—Å–∏–º –ï–¥—É–∞—Ä–¥–æ–≤–∏—á @Marshmallllows
    // 25	–°–≤–∏—Å—Ç—É–Ω –ê—Ä—Ç–µ–º –°–µ—Ä–≥—ñ–π–æ–≤–∏—á @haivop
    // 26	–°–µ—Ä–∫–µ–ª—ñ –ê—Ä—Ç—É—Ä –í–∞–¥–∏–º–æ–≤–∏—á @Artychanal
    // 27	–¶–∏–º–±–∞–ª –ö–æ—Å—Ç—è–Ω—Ç–∏–Ω –Ñ–≤–≥–µ–Ω–æ–≤–∏—á @golova_le_silrade
    // 28	–Æ—Ä—á–µ–Ω–∫–æ –ë–æ–≥–¥–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á @b1dess
];

fn get_pair<'a>(pair: [&'a str; 3], username: &'a str, query: &'a str) -> Option<&'a str> {
    if pair[0] == username && pair[1] == query {
        return Some(pair[2]);
    }

    None
}

use crate::{bot::handler::HandlerResult, db::StateWithConnection, state::State};
use teloxide::types::{Me, MessageReactionUpdated, ReactionType, Update, User};

pub async fn handle_reaction(
    message_reaction: MessageReactionUpdated,
    state: State,
) -> HandlerResult {
    let new_reaction =
        find_new_reaction(message_reaction.old_reaction, message_reaction.new_reaction);
    tracing::debug!("New reaction: {:?}", new_reaction);
    let points = get_reaction_points(&new_reaction);
    let conn = &mut state.conn().await;
    let user_that_gave_reaction = message_reaction.user;
    let message_id = message_reaction.message_id;

    // tracing::debug!(
    //     "User that gave reaction: {:?}, user that received reaction: {:?}",
    //     user_that_gave_reaction,
    //     user_that_received_reaction
    // );
    if new_reaction.emoji().unwrap().as_str() == "üí©" {
        return Ok(());
    }
    Ok(())
}

fn find_new_reaction(old_list: Vec<ReactionType>, new_list: Vec<ReactionType>) -> ReactionType {
    for reaction in new_list {
        if !old_list.contains(&reaction) {
            return reaction;
        }
    }

    return ReactionType::Emoji {
        emoji: "üò¥".to_string(),
    };
}

/// Reaction emoji. Currently, it can be one of "üëç", "üëé", "‚ù§", "üî•",
/// "ü•∞", "üëè", "üòÅ", "ü§î", "ü§Ø", "üò±", "ü§¨", "üò¢", "üéâ", "ü§©",
/// "ü§Æ", "üí©", "üôè", "üëå", "üïä", "ü§°", "ü•±", "ü•¥", "üòç", "üê≥",
/// "‚ù§‚Äçüî•", "üåö", "üå≠", "üíØ", "ü§£", "‚ö°", "üçå", "üèÜ", "üíî", "ü§®",
/// "üòê", "üçì", "üçæ", "üíã", "üñï", "üòà", "üò¥", "üò≠", "ü§ì", "üëª",
/// "üë®‚Äçüíª", "üëÄ", "üéÉ", "üôà", "üòá", "üò®", "ü§ù", "‚úç", "ü§ó", "ü´°",
/// "üéÖ", "üéÑ", "‚òÉ", "üíÖ", "ü§™", "üóø", "üÜí", "üíò", "üôâ", "ü¶Ñ", "üòò",
/// "üíä", "üôä", "üòé", "üëæ", "ü§∑‚Äç‚ôÇ", "ü§∑", "ü§∑‚Äç‚ôÄ", "üò°"
fn get_reaction_points(reaction: &ReactionType) -> i32 {
    let reaction = reaction.emoji().unwrap().as_str();
    match reaction {
        "üëç" => 5,
        "üëé" => -5,
        "‚ù§" => 10,
        "üî•" => 10,
        "ü•∞" => 5,
        "üëè" => 5,
        "üòÅ" => 5,
        "ü§î" => 5,
        "ü§Ø" => 5,
        "üò±" => 5,
        "ü§¨" => -5,
        "üò¢" => -5,
        "üéâ" => 5,
        "ü§©" => 5,
        "ü§Æ" => -10,
        "üí©" => -10, // –∑–∞ —Ü—é —Ä–µ–∞–∫—Ü—ñ—é —Ä–µ–π—Ç–∏–Ω–≥ –∑–º—ñ–º–∞—Ç–∏–º–µ—Ç—å—Å—è —Ç–æ–º—É —Ö—Ç–æ —ó—ó —Å—Ç–∞–≤–∏—Ç—å
        "üôè" => 5,
        "üëå" => 5,
        "üïä" => 5,
        "ü§°" => -5,
        "ü•±" => 0,
        "ü•¥" => 0,
        "üòç" => 10,
        "üê≥" => -50, // –ø—Ä–∞–Ω–∫ üòà
        "‚ù§‚Äçüî•" => 5,
        "üåö" => 5,
        "üå≠" => 5,
        "üíØ" => 5, // –∞ –º–æ–≥–ª–æ –± –±—É—Ç—å 100 üò≠üò≠üò≠
        "ü§£" => 5,
        "‚ö°" => 5,
        "üçå" => 5,
        "üèÜ" => 100000, // —Ñ—É–ª –∞—Ö—É–π
        "üíî" => -5,
        "ü§®" => 5,
        "üòê" => 5,
        "üçì" => 5,
        "üçæ" => 5,
        "üíã" => 5,
        "üñï" => -10,
        "üòà" => 5,
        "üò¥" => 0, // –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º—É —Ü—é —è–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—É
        "üò≠" => -5,
        "ü§ì" => 5,
        "üëª" => 5,
        "üë®‚Äçüíª" => -1, // —Ü–µ –¥–ª—è –∫–∏—Ä–∏–ª–æ–∫–∞—Ä–∞
        "üëÄ" => 5,
        "üéÉ" => 15, // –ª–∏—á–∫–æ —ñ–¥—ñ –Ω–∞—Ö—É–π
        "üôà" => 5,
        "üòá" => 5,
        "üò®" => 0,
        "ü§ù" => 5,
        "‚úç" => 5,
        "ü§ó" => 5,
        "ü´°" => 5,
        "üéÖ" => 5,
        "üéÑ" => 5,
        "‚òÉ" => 5,
        "üíÖ" => -5, // —Å–ª–µ–π—á–∏–∫–∏ –æ–ø—É—Å—Ç—è—Ç—å –æ–¥–Ω–µ –æ–¥–Ω–æ–≥–æ
        "ü§™" => 5,
        "üóø" => 2,
        "üÜí" => 10,
        "üíò" => 10,
        "üôâ" => 5,
        "ü¶Ñ" => 5,
        "üòò" => 5,
        "üíä" => 5,
        "üôä" => 5,
        "üòé" => 5,
        "üëæ" => 3, // —Ç—Ä–æ—à–∫–∏ –∑–∞–Ω–µ—Ä—Ñ–∏—Ç—å
        "ü§∑‚Äç‚ôÇ" => 0,
        "ü§∑" => 0,
        "ü§∑‚Äç‚ôÄ" => 0,
        "üò°" => -2,
        _ => 15, // –±–æ–Ω—É—Å –¥–æ–Ω–∞—Ç–µ—Ä–∞–º
    }
}

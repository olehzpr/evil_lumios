use std::collections::{BTreeMap, HashMap};

use crate::{
    bot::timetable::{Day, Week},
    models::timetable::TimetableEntryModel,
};

use super::utils::adapt_for_markdown;

pub fn day_view(entries: Vec<TimetableEntryModel>) -> String {
    let mut grouped_entries: BTreeMap<String, HashMap<String, Vec<TimetableEntryModel>>> =
        BTreeMap::new();

    for entry in entries {
        let time_key = entry.class_time.format("%H:%M").to_string();
        let type_key = class_type_label(&entry.class_type).to_string();

        grouped_entries
            .entry(time_key)
            .or_insert_with(HashMap::new)
            .entry(type_key)
            .or_insert_with(Vec::new)
            .push(entry);
    }

    let mut response = String::new();

    response.push_str("üìÖ *\\>\\> –†–û–ó–ö–õ–ê–î \\<\\<* üìÖ\n\n");

    for (time, class_types) in grouped_entries {
        let type_keys: Vec<&String> = class_types.keys().collect();

        if type_keys.len() == 1 {
            response.push_str(&format!(
                "*{} {} {}*\n",
                get_time_emoji(&time),
                time,
                reverse_type_label(type_keys[0])
            ));

            for entry in class_types[type_keys[0]].iter() {
                response.push_str(&format!("‚îÉ {}\n", entry_row_no_time(entry)));
            }
        } else {
            response.push_str(&format!("*{} {}*\n", get_time_emoji(&time), time));

            for (class_type, group) in class_types {
                response.push_str(&format!("{}\n", class_type));

                for entry in group {
                    response.push_str(&format!("‚îÉ {}\n", entry_row_no_time(&entry)));
                }
            }
        }

        response.push('\n');
    }

    if response.is_empty() {
        response = random_response();
    }
    return response;
}

pub fn week_view(entries: Vec<TimetableEntryModel>) -> String {
    let mut response = String::new();
    let mut day: Day = Day::Mon;
    for entry in entries {
        if entry.day == day as i32 {
            response.push_str(&format!("\n*{}*\n", day));
            day = day.next();
        }
        response.push_str(&entry_row(&entry, false));
    }
    if response.is_empty() {
        response = adapt_for_markdown("–°—Ö–æ–∂–µ —â–æ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –ø–∞—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /import\n".to_string());
    }
    return response;
}

pub fn edit_view(entries: Vec<TimetableEntryModel>) -> String {
    let mut response = String::new();
    let mut day: Day = Day::Mon;
    let mut week: Week = Week::First;
    for entry in entries {
        if entry.week == u8::from(week) as i32 {
            response.push_str(&format!("\n*üìÖ {}*\n", week));
            week = week.next();
            day = Day::Mon;
        }
        if entry.day == u8::from(day) as i32 {
            response.push_str(&format!("\n*{}*\n", day.to_string()));
            day = day.next();
        }
        response.push_str(&entry_row(&entry, true));
    }
    return response;
}

pub fn entry_view(entry: Option<TimetableEntryModel>) -> String {
    if entry.is_none() {
        return adapt_for_markdown(format!("{}\n", random_response()));
    }
    let entry = entry.unwrap();
    let identifier = class_type_identifier(&entry.class_type);
    let time = entry.class_time.format("%H:%M").to_string();
    adapt_for_markdown(format!(
        "üîî *> –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø* < üîî\n\n{} {}\n–ü–æ—á–∞—Ç–æ–∫: {} {}\n\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—é ‚¨áÔ∏è",
        identifier,
        entry.class_name,
        time,
        get_time_emoji(&time)
    ))
}

pub fn update_link_view(entry: &TimetableEntryModel) -> String {
    adapt_for_markdown(format!(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø–∞—Ä–∏ *{} {} {}*\n",
        class_type_identifier(&entry.class_type),
        entry.class_name,
        class_type_identifier(&entry.class_type),
    ))
}

fn entry_row(entry: &TimetableEntryModel, edit: bool) -> String {
    let identifier = class_type_identifier(&entry.class_type);
    let short_name = entry
        .class_name
        .split(|c| c == '.' || c == ':')
        .next()
        .unwrap();
    let mut link = short_name.to_string();
    let mut edit_link = "".to_string();
    if let Some(entry_link) = &entry.link {
        link = format!("[{}]({})", short_name, entry_link);
    }
    if edit {
        edit_link = format!(
            "[‚úèÔ∏è](https://t.me/evil_lumios_bot?start=edit-timetable_{})",
            entry.id
        );
    }
    let formatted_time = entry.class_time.format("%H:%M").to_string();
    adapt_for_markdown(format!(
        "{} {} - {} {}\n",
        identifier, formatted_time, link, edit_link
    ))
}

fn entry_row_no_time(entry: &TimetableEntryModel) -> String {
    let short_name = entry
        .class_name
        .split(|c| c == '.' || c == ':')
        .next()
        .unwrap();
    let mut link = short_name.to_string();
    if let Some(entry_link) = &entry.link {
        link = format!("[{}]({})", short_name, entry_link);
    }
    adapt_for_markdown(format!("{}", link))
}

pub fn class_type_identifier(class_type: &str) -> &str {
    match class_type {
        "lec" => "üîµ",
        "lab" => "üü¢",
        "prac" => "üü†",
        _ => "üü£",
    }
}

pub fn class_type_label(class_type: &str) -> &'static str {
    match class_type {
        "lec" => "üîµ –õ–µ–∫—Ü—ñ—è:",
        "lab" => "üü¢ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞:",
        "prac" => "üü† –ü—Ä–∞–∫—Ç–∏–∫–∞:",
        _ => "üü£ –Ü–Ω—à–µ:",
    }
}

pub fn reverse_type_label(class_type: &str) -> &'static str {
    match class_type {
        "üîµ –õ–µ–∫—Ü—ñ—è:" => " –õ–µ–∫—Ü—ñ—è üîµ:",
        "üü¢ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞:" => "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ üü¢:",
        "üü† –ü—Ä–∞–∫—Ç–∏–∫–∞:" => "–ü—Ä–∞–∫—Ç–∏–∫–∞ üü†:",
        _ => "–Ü–Ω—à–µ üü£:",
    }
}

pub fn random_response() -> String {
    let responses = vec![
        "–ù–∞—Ä–∞–∑—ñ –∑–∞–Ω—è—Ç—Ç—è –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ú–æ–∂–µ, –∫—Ä–∞—â–µ –ø—Ä–æ–≥—É–ª—è–π—Å—è –∑–∞–º—ñ—Å—Ç—å —Å–∏–¥—ñ–Ω–Ω—è —Ç—É—Ç üì°",
        "–í—Å–µ —â–µ –Ω–µ–º–∞—î –∑–∞–Ω—è—Ç—Ç—è. –°–ø—Ä–æ–±—É–π —Ö–æ—á–∞ –± –ø–æ—á–∏—Ç–∞—Ç–∏ —â–æ—Å—å –∫–æ—Ä–∏—Å–Ω–µ üì°",
        "–¢—É—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î. –ú–æ–∂–µ, –≤–∂–µ —á–∞—Å –∑–Ω–∞–π—Ç–∏ —Å–æ–±—ñ —Ö–æ–±—ñ? üì°",
        "–ó–∞–π–º–∞—Ç–∏—Å—è –Ω–µ–º–∞ —á–∏–º? –ü—ñ–¥–∏ –ø–æ–ø—Ä–∏–±–∏—Ä–∞–π –∞–±–æ –∑—Ä–æ–±–∏ —â–æ—Å—å, —â–æ –Ω–µ —Å–æ—Ä–æ–º–Ω–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –¥—Ä—É–∑—è–º üì°",
        "–ñ–æ–¥–Ω–∏—Ö –∑–∞–Ω—è—Ç—å. –ù–∞–ø–µ–≤–Ω–æ, —Ü–µ –∑–Ω–∞–∫, —â–æ –ø–æ—Ä–∞ –∑—Ä–æ–±–∏—Ç–∏ —â–æ—Å—å —ñ–∑ –∂–∏—Ç—Ç—è üì°",
        "–¢—É—Ç –ø–æ—Ä–æ–∂–Ω—å–æ. –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –≤—Ä–µ—à—Ç—ñ –ø—Ä–æ–∫–∞—á–∞—Ç–∏ —Å–≤—ñ–π –º–æ–∑–æ–∫, –∞ –Ω–µ —Å–∫—Ä–æ–ª–∏—Ç–∏ üì°",
        "–ù—ñ—á–æ–≥–æ —Ü—ñ–∫–∞–≤–æ–≥–æ. –Ø–∫ —â–æ–¥–æ —Ç–æ–≥–æ, —â–æ–± –ø—Ä–∏–ø–∏–Ω–∏—Ç–∏ –±—É—Ç–∏ –ª–µ–¥–∞—Ä–µ–º —ñ —Ä—É—Ö–∞—Ç–∏—Å—å —É–ø–µ—Ä–µ–¥ üì°",
        "–ó–∞–Ω—è—Ç—å –Ω–µ–º–∞—î, –∞–ª–µ —Ç–∏ –∂ –Ω–µ –±–µ–∑–Ω–∞–¥—ñ–π–Ω–∏–π, –∑–Ω–∞–π–¥–∏ —Å–æ–±—ñ —Å–ø—Ä–∞–≤—É üì°",
    ];
    return responses[rand::random::<usize>() % responses.len()].to_string();
}

fn get_time_emoji(time: &String) -> String {
    let emoji = match time.as_str() {
        "08:30" => "üï£",
        "10:25" => "üï•",
        "12:20" => "üïß",
        "14:15" => "üïë",
        "16:10" => "üïì",
        "18:05" => "üïï",
        "20:00" => "üïñ",
        _ => "üïò",
    };

    emoji.to_string()
}
